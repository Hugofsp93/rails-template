require "rails_helper"

RSpec.describe <%= class_name %>, type: :model do
  describe "validations" do
<% attributes.each do |attribute| -%>
<% if attribute.type == :string || attribute.type == :text -%>
    it { should validate_presence_of(:<%= attribute.name %>) }
<% end -%>
<% end -%>
<% attributes.each do |attribute| -%>
<% if attribute.name.include?('email') -%>
    it { should validate_uniqueness_of(:<%= attribute.name %>).case_insensitive }
    it { should allow_value("user@example.com").for(:<%= attribute.name %>) }
    it { should_not allow_value("invalid_email").for(:<%= attribute.name %>) }
<% end -%>
<% end -%>
<% attributes.each do |attribute| -%>
<% if attribute.name.include?('phone') -%>
    it { should allow_value("+5511999999999").for(:<%= attribute.name %>) }
    it { should_not allow_value("invalid_phone").for(:<%= attribute.name %>) }
<% end -%>
<% end -%>
  end

  describe "associations" do
<% attributes.each do |attribute| -%>
<% if attribute.type == :references -%>
    it { should belong_to(:<%= attribute.name.gsub('_id', '') %>) }
<% end -%>
<% end -%>
  end

  describe "callbacks" do
<% attributes.each do |attribute| -%>
<% if attribute.name.include?('email') -%>
    it "downcases email before save" do
      <%= singular_table_name %> = build(:<%= singular_table_name %>, <%= attribute.name %>: "USER@EXAMPLE.COM")
      <%= singular_table_name %>.save
      expect(<%= singular_table_name %>.<%= attribute.name %>).to eq("user@example.com")
    end
<% end -%>
<% end -%>
  end

  describe "scopes" do
<% attributes.each do |attribute| -%>
<% if attribute.name.include?('status') -%>
    describe ".active" do
      it "returns active records" do
        active_<%= singular_table_name %> = create(:<%= singular_table_name %>, <%= attribute.name %>: "active")
        inactive_<%= singular_table_name %> = create(:<%= singular_table_name %>, <%= attribute.name %>: "inactive")
        expect(<%= class_name %>.active).to include(active_<%= singular_table_name %>)
        expect(<%= class_name %>.active).not_to include(inactive_<%= singular_table_name %>)
      end
    end
<% end -%>
<% end -%>
  end

  describe "methods" do
<% attributes.each do |attribute| -%>
<% if attribute.name.include?('name') && !attribute.name.include?('first') && !attribute.name.include?('last') -%>
    describe "#display_name" do
      it "returns the name" do
        <%= singular_table_name %> = create(:<%= singular_table_name %>, <%= attribute.name %>: "Test <%= class_name %>")
        expect(<%= singular_table_name %>.display_name).to eq("Test <%= class_name %>")
      end
    end
<% end -%>
<% end -%>
<% attributes.each do |attribute| -%>
<% if attribute.name.include?('status') -%>
    describe "#active?" do
      it "returns true when status is active" do
        <%= singular_table_name %> = create(:<%= singular_table_name %>, <%= attribute.name %>: "active")
        expect(<%= singular_table_name %>.active?).to be true
      end

      it "returns false when status is not active" do
        <%= singular_table_name %> = create(:<%= singular_table_name %>, <%= attribute.name %>: "inactive")
        expect(<%= singular_table_name %>.active?).to be false
      end
    end
<% end -%>
<% end -%>
  end
end 