import { Head, Link, router, usePage } from '@inertiajs/react'
import { useToast } from '../../hooks/useToast'
import { useAuthorization } from '../../hooks/useAuthorization'
import Toast from "../../components/Toast"
import AccessDenied from "../../components/AccessDenied"
import { useState, useEffect } from 'react'
import { initDropdowns } from 'flowbite'
import Table from '../../components/Table'
import Pagination from '../../components/Pagination'
import SearchBar from '../../components/SearchBar'
import FilterDropdown from '../../components/FilterDropdown'
import { formatDate, formatDateOnly, formatTime, formatNumber } from '../../utils/formatters'

export default function Index() {
  const { toast } = useToast()
  const { <%= plural_table_name %>, pagination } = usePage().props
  const { canManage, canCreate, canEdit, canDelete, canSee } = useAuthorization()
  const [statusFilter, setStatusFilter] = useState(null)
  const [searchValue, setSearchValue] = useState('')
  const basePath = '/<%= plural_table_name %>'

  // Initialize Flowbite dropdowns
  useEffect(() => {
    initDropdowns()
  }, [<%= plural_table_name %>]) // Re-initialize when data changes

  const handleSearch = (value) => {
    setSearchValue(value)
    router.get(basePath, { 
      search: value, 
      status: statusFilter 
    }, { preserveState: true })
  }

  const handleFilterChange = (value) => {
    setStatusFilter(value)
    router.get(basePath, { 
      search: searchValue, 
      status: value 
    }, { preserveState: true })
  }

  const handlePageChange = (page) => {
    router.get(basePath, { 
      page, 
      search: searchValue,
      status: statusFilter 
    }, { preserveState: true })
  }

  const handleActionClick = (action, <%= singular_table_name %>) => {
    if (action === 'delete') {
      if (confirm('Are you sure you want to delete this <%= singular_table_name %>?')) {
        router.delete(`${basePath}/${<%= singular_table_name %>.id}`)
      }
    }
  }

  // Filter <%= plural_table_name %> based on authorization
  const filtered<%= class_name.pluralize %> = <%= plural_table_name %>.filter(<%= singular_table_name %> => canSee(<%= singular_table_name %>))

  const columns = [
<% attributes.reject { |a| a.password_digest? || a.type == :text || a.type == :binary || a.reference? }.each do |attribute| -%>
    { 
      key: '<%= attribute.name %>', 
      label: '<%= attribute.name.titleize %>'
<% if attribute.type == :boolean -%>
      ,render: (<%= singular_table_name %>) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${<%= singular_table_name %>.<%= attribute.name %> ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'}`}>
          {<%= singular_table_name %>.<%= attribute.name %> ? 'Active' : 'Inactive'}
        </span>
      )
<% elsif attribute.type == :datetime -%>
      ,render: (<%= singular_table_name %>) => formatDate(<%= singular_table_name %>.<%= attribute.name %>)
<% elsif attribute.type == :date -%>
      ,render: (<%= singular_table_name %>) => formatDateOnly(<%= singular_table_name %>.<%= attribute.name %>)
<% elsif attribute.type == :time -%>
      ,render: (<%= singular_table_name %>) => formatTime(<%= singular_table_name %>.<%= attribute.name %>)
<% elsif [:integer, :bigint, :float, :decimal].include?(attribute.type) -%>
      ,render: (<%= singular_table_name %>) => formatNumber(<%= singular_table_name %>.<%= attribute.name %>, '<%= attribute.type %>')
<% end -%>
    },
<% end -%>
  ]

  const actions = [
    { 
      key: 'show', 
      label: 'Show', 
      href: (<%= singular_table_name %>) => `${basePath}/${<%= singular_table_name %>.id}`,
      visible: (<%= singular_table_name %>) => canSee(<%= singular_table_name %>)
    },
    { 
      key: 'edit', 
      label: 'Edit', 
      href: (<%= singular_table_name %>) => `${basePath}/${<%= singular_table_name %>.id}/edit`,
      visible: (<%= singular_table_name %>) => canEdit(<%= singular_table_name %>)
    },
    { 
      key: 'delete', 
      label: 'Delete',
      visible: (<%= singular_table_name %>) => canDelete(<%= singular_table_name %>)
    }
  ]

  const filterOptions = [
    { value: null, label: 'All <%= plural_table_name %>' },
    { value: 'true', label: 'Active' },
    { value: 'false', label: 'Inactive' }
  ]

  // Don't render the page if user can't manage <%= plural_table_name %>
  if (!canManage('<%= class_name %>')) {
    return <AccessDenied message="You don't have permission to view this page." />
  }

  return (
    <>
      <Head title="<%= plural_table_name.titleize %>" />
      {toast && <Toast {...toast} />}

      <section className="w-full p-3 sm:p-5">
        <div className="mx-auto max-w-screen-xl px-4 lg:px-12">
          <div className="bg-neutral-50 dark:bg-neutral-800 relative shadow-md sm:rounded-lg overflow-hidden">
            <div className="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 p-4">
              <div className="w-full md:w-1/2">
                <SearchBar 
                  onSearch={handleSearch}
                  placeholder="Search <%= plural_table_name %>"
                />
              </div>
              <div className="w-full md:w-auto flex flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0">
                {canCreate('<%= class_name %>') && (
                  <Link 
                    href={`${basePath}/new`}
                    type="button" 
                    className="flex items-center justify-center text-neutral-50 bg-utility-700 hover:bg-utility-600 focus:outline-none font-medium rounded-lg text-sm px-4 py-2 dark:bg-utility-700 dark:hover:bg-utility-600"
                  >
                    <svg className="h-3.5 w-3.5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                      <path clipRule="evenodd" fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" />
                    </svg>
                    Add <%= singular_table_name.titleize %>
                  </Link>
                )}
                <FilterDropdown
                  id="statusFilter"
                  options={filterOptions}
                  selectedValue={statusFilter}
                  onChange={handleFilterChange}
                />
              </div>
            </div>

            <Table 
              columns={columns}
              data={filtered<%= class_name.pluralize %>}
              actions={actions}
              onActionClick={handleActionClick}
            />

            <Pagination
              currentPage={pagination.currentPage}
              totalPages={pagination.totalPages}
              totalItems={pagination.totalItems}
              perPage={pagination.perPage}
              onPageChange={handlePageChange}
            />
          </div>
        </div>
      </section>
    </>
  )
}