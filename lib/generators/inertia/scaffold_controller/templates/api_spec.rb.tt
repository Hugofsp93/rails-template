require "rails_helper"

RSpec.describe "Api::<%= class_name.pluralize %>", type: :request do
  let(:valid_attributes) {
    attributes_for(:<%= singular_table_name %>)
  }

  let(:invalid_attributes) {
    attributes_for(:<%= singular_table_name %>, :with_invalid_attributes)
  }

  let(:<%= singular_table_name %>) { create(:<%= singular_table_name %>) }

  describe "GET /api/<%= plural_table_name %>" do
    it "returns a list of <%= plural_table_name %>" do
      get "/api/<%= plural_table_name %>"
      expect(response).to have_http_status(:ok)
      expect(JSON.parse(response.body)).to be_an(Array)
    end
  end

  describe "GET /api/<%= plural_table_name %>/:id" do
    it "returns a specific <%= singular_table_name %>" do
      get "/api/<%= plural_table_name %>/#{<%= singular_table_name %>.id}"
      expect(response).to have_http_status(:ok)
      expect(JSON.parse(response.body)["id"]).to eq(<%= singular_table_name %>.id)
    end

    it "returns 404 for non-existent <%= singular_table_name %>" do
      get "/api/<%= plural_table_name %>/999999"
      expect(response).to have_http_status(:not_found)
    end
  end

  describe "POST /api/<%= plural_table_name %>" do
    context "with valid parameters" do
      it "creates a new <%= singular_table_name %>" do
        expect {
          post "/api/<%= plural_table_name %>", params: { <%= singular_table_name %>: valid_attributes }
        }.to change(<%= class_name %>, :count).by(1)
      end

      it "returns the created <%= singular_table_name %>" do
        post "/api/<%= plural_table_name %>", params: { <%= singular_table_name %>: valid_attributes }
        expect(response).to have_http_status(:created)
        expect(JSON.parse(response.body)).to include("id")
      end
    end

    context "with invalid parameters" do
      it "does not create a new <%= singular_table_name %>" do
        expect {
          post "/api/<%= plural_table_name %>", params: { <%= singular_table_name %>: invalid_attributes }
        }.to change(<%= class_name %>, :count).by(0)
      end

      it "returns errors" do
        post "/api/<%= plural_table_name %>", params: { <%= singular_table_name %>: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(JSON.parse(response.body)).to include("errors")
      end
    end
  end

  describe "PATCH /api/<%= plural_table_name %>/:id" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "Updated Name" }
      }

      it "updates the <%= singular_table_name %>" do
        patch "/api/<%= plural_table_name %>/#{<%= singular_table_name %>.id}", params: { <%= singular_table_name %>: new_attributes }
        <%= singular_table_name %>.reload
        expect(<%= singular_table_name %>.name).to eq("Updated Name")
      end

      it "returns the updated <%= singular_table_name %>" do
        patch "/api/<%= plural_table_name %>/#{<%= singular_table_name %>.id}", params: { <%= singular_table_name %>: new_attributes }
        expect(response).to have_http_status(:ok)
        expect(JSON.parse(response.body)["name"]).to eq("Updated Name")
      end
    end

    context "with invalid parameters" do
      it "returns errors" do
        patch "/api/<%= plural_table_name %>/#{<%= singular_table_name %>.id}", params: { <%= singular_table_name %>: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(JSON.parse(response.body)).to include("errors")
      end
    end
  end

  describe "DELETE /api/<%= plural_table_name %>/:id" do
    it "destroys the <%= singular_table_name %>" do
      <%= singular_table_name %>_to_delete = create(:<%= singular_table_name %>)
      expect {
        delete "/api/<%= plural_table_name %>/#{<%= singular_table_name %>_to_delete.id}"
      }.to change(<%= class_name %>, :count).by(-1)
    end

    it "returns no content" do
      <%= singular_table_name %>_to_delete = create(:<%= singular_table_name %>)
      delete "/api/<%= plural_table_name %>/#{<%= singular_table_name %>_to_delete.id}"
      expect(response).to have_http_status(:no_content)
    end
  end
end 