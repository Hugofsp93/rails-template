describe('<%= class_name.pluralize %>', () => {
  beforeEach(() => {
    // Login como admin
    cy.login('rails@template.com', 'lklklklk')
  })

  describe('Página Index', () => {
    it('deve carregar a lista de <%= plural_table_name %>', () => {
      cy.visit('/<%= plural_table_name %>')
      
      // Verifica se a página carregou
      cy.get('body').should('exist')
      cy.get('h1, h2').should('contain', '<%= plural_table_name.titleize %>')
    })

    it('deve mostrar botão de criar para usuários autorizados', () => {
      cy.visit('/<%= plural_table_name %>')
      
      // Procura por botão de criar de várias formas
      cy.get('a[href*="/new"], button:contains("New"), button:contains("Create"), button:contains("Add")').should('exist')
    })

    it('deve ter uma tabela ou lista', () => {
      cy.visit('/<%= plural_table_name %>')
      
      // Verifica se existe uma tabela ou lista
      cy.get('table, .table, [role="table"], ul, ol').should('exist')
    })
  })

  describe('Página Show', () => {
    it('deve mostrar detalhes de um <%= singular_table_name %>', () => {
      // Primeiro vamos para a página index
      cy.visit('/<%= plural_table_name %>')
      
      // Clica no primeiro link de "show" ou "ver"
      cy.get('a[href*="/<%= plural_table_name %>/"]').first().click()
      
      // Verifica se carregou a página de detalhes
      cy.url().should('include', '/<%= plural_table_name %>/')
      cy.get('body').should('exist')
    })

    it('deve ter botão de editar', () => {
      cy.visit('/<%= plural_table_name %>')
      cy.get('a[href*="/<%= plural_table_name %>/"]').first().click()
      
      // Procura por botão de editar
      cy.get('a[href*="/edit"], button:contains("Edit"), button:contains("Editar")').should('exist')
    })
  })

  describe('Página Create', () => {
    it('deve criar um novo <%= singular_table_name %>', () => {
      cy.visit('/<%= plural_table_name %>/new')
      
      // Verifica se a página carregou
      cy.get('body').should('exist')
      
      // Preenche os campos básicos
<% attributes.each do |attribute| -%>
<% if attribute.type == :string -%>
      cy.get('input[name="<%= attribute.name %>"], input[placeholder*="<%= attribute.name.titleize %>"]').type('Test <%= attribute.name.titleize %>')
<% elsif attribute.type == :text -%>
      cy.get('textarea[name="<%= attribute.name %>"], textarea[placeholder*="<%= attribute.name.titleize %>"]').type('Test <%= attribute.name.titleize %> description')
<% elsif attribute.type == :integer -%>
      cy.get('input[name="<%= attribute.name %>"], input[type="number"]').type('123')
<% elsif attribute.type == :boolean -%>
      cy.get('input[name="<%= attribute.name %>"], input[type="checkbox"]').check()
<% elsif attribute.type == :date -%>
      cy.get('input[name="<%= attribute.name %>"], input[type="date"]').type('2024-01-01')
<% elsif attribute.type == :datetime -%>
      cy.get('input[name="<%= attribute.name %>"], input[type="datetime-local"]').type('2024-01-01T10:00')
<% elsif attribute.type == :time -%>
      cy.get('input[name="<%= attribute.name %>"], input[type="time"]').type('10:00')
<% elsif attribute.type == :references -%>
      cy.get('select[name="<%= attribute.name %>"], select').select('1')
<% end -%>
<% end -%>

      // Clica no botão de submit
      cy.get('button[type="submit"], input[type="submit"], button:contains("Create"), button:contains("Save")').click()
      
      // Verifica se foi redirecionado
      cy.url().should('include', '/<%= plural_table_name %>/')
    })

    it('deve mostrar erros de validação', () => {
      cy.visit('/<%= plural_table_name %>/new')
      
      // Submete sem preencher campos obrigatórios
      cy.get('button[type="submit"], input[type="submit"]').click()
      
      // Verifica se apareceram erros
      cy.get('body').should('contain', 'error')
    })
  })

  describe('Página Edit', () => {
    it('deve editar um <%= singular_table_name %> existente', () => {
      // Vai para a página index
      cy.visit('/<%= plural_table_name %>')
      
      // Clica no primeiro link de editar
      cy.get('a[href*="/edit"], button:contains("Edit")').first().click()
      
      // Verifica se carregou a página de edição
      cy.url().should('include', '/edit')
      
      // Modifica um campo
      cy.get('input[name="<%= attributes.first.name %>"]').clear().type('Updated <%= attributes.first.name.titleize %>')
      
      // Salva
      cy.get('button[type="submit"], input[type="submit"], button:contains("Update"), button:contains("Save")').click()
      
      // Verifica se foi redirecionado
      cy.url().should('include', '/<%= plural_table_name %>/')
    })
  })

  describe('Funcionalidade Delete', () => {
    it('deve deletar um <%= singular_table_name %>', () => {
      cy.visit('/<%= plural_table_name %>')
      
      // Clica no primeiro botão de deletar
      cy.get('button:contains("Delete"), button:contains("Remove"), a:contains("Delete")').first().click()
      
      // Confirma a deleção (se houver confirmação)
      cy.get('button:contains("Confirm"), button:contains("Yes"), button:contains("OK")').click()
      
      // Verifica se voltou para a lista
      cy.url().should('include', '/<%= plural_table_name %>')
    })
  })

  describe('Autorização', () => {
    it('deve negar acesso a usuários não autorizados', () => {
      // Login como usuário regular
      cy.login('user@example.com', 'lklklklk')
      
      cy.visit('/<%= plural_table_name %>')
      
      // Verifica se aparece mensagem de acesso negado
      cy.get('body').should('contain', 'permission')
    })
  })
}) 